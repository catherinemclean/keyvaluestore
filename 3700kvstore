#!/usr/bin/env python

import sys, socket, select, time, json, random, decimal

# Sends out RequestVote RPCs to declare self candidate
def request_vote (term, candidateId, lastLogIndex, lastLogTerm, sock):
	raw_msg = {'src':candidateId, 'dst':'FFFF', 'leader':'FFFF', 'type':'requestvoterpc', 'term':term, 'candidateId':candidateId, 'lastLogIndex':lastLogIndex, 'lastLogTerm':lastLogTerm}
	msg = json.dumps(raw_msg)
	if sock.send(msg):
		print 'Successfully sent vote request for %s' % (candidateId)

# See if we want to vote for the candidate
def handle_vote_request(msg, sock):
	global votedFor
	global currentTerm
	global commitIndex
	global my_id
	global last
	vote = msg['term'] > currentTerm or (msg['term'] == currentTerm and msg['lastLogIndex'] > len(log) - 1) or (msg['term'] == currentTerm and msg['lastLogIndex'] == (len(log) - 1) and msg['lastLogTerm'] >= log[len(log) - 1][1])
	to_vote = vote and (votedFor is None or msg['term'] > currentTerm)
	raw_msg = {'src':my_id, 'dst':msg['src'], 'leader':'FFFF', 'type':'replyvoterpc', 'term':currentTerm, 'vote':to_vote}
	if to_vote:
		votedFor = msg['candidateId']
		currentTerm = msg['term']
		last = time.time()
	msg = json.dumps(raw_msg)
	if sock.send(msg):
		print 'ID %s successfully voted for leader' % (my_id)

# decide if we won the election, if so, send out heartbeats
def tally_votes(sock):
	global votes
	global currentState
	global leader_id
	global my_id
	global appendLast
	print 'election: id = %s, votes = %s, total = %s' % (my_id, votes, len(replica_ids) + 1)
	if votes > (len(replica_ids) + 1) / 2:
		currentState = 'leader'
		leader_id = my_id
		send_append_rpc([], sock)
		appendLast = time.time()

# Send out the given data to all nodes
def send_append_rpc(data, sock):
	global leader_id
	global my_id
	global currentTerm
	#print "append rpcs"
	raw_msg = {'src':my_id, 'dst':'FFFF', 'leader':leader_id, 'type':'appendrpc', 'term':currentTerm, 'data':data}
	msg = json.dumps(raw_msg)
	sock.send(msg)

# Your ID number
my_id = sys.argv[1]

# The ID numbers of all the other replicas
replica_ids = sys.argv[2:]

# Connect to the network. All messages to/from other replicas and clients will
# occur over this socket
sock = socket.socket(socket.AF_UNIX, socket.SOCK_SEQPACKET)
sock.connect(my_id)

last = time.time()
appendLast = 0

currentTerm = 0
votedFor = None
log = [(-1, -1)]

commitIndex = 0
lastApplied = 0

nextIndex = []
matchIndex = []

# leader ID
leader_id = 'FFFF'

#number of votes if you are a candidate
votes = 0

# represents if we're a leader, candidate, or follower
currentState = 'follower'

# represents the random timeout between 150 and 300 ms
# stored in seconds
election_timeout = decimal.Decimal(random.randint(150, 300)) / 1000

while True:
	ready = select.select([sock], [], [], 0.1)[0]
	
	if sock in ready:
		msg_raw = sock.recv(32768)
		
		if len(msg_raw) == 0: continue
		msg = json.loads(msg_raw)
		
		# For now, ignore get() and put() from clients
		if msg['type'] in ['get', 'put']:
			#print 'Received %s for MID %s' % (msg['type'], msg['MID'])
			if currentState != 'leader':
                		reply = {'src':my_id, 'dst':msg['src'], 'leader':leader_id, 'type':'redirect','MID':msg['MID']}
				#print 'Redirect message from %s to %s' % (my_id, leader_id)
			else:
                		reply = {'src':my_id, 'dst':msg['src'], 'leader':leader_id, 'type':'fail','MID':msg['MID']}
			json_reply = json.dumps(reply)
			if sock.send(json_reply):
				print 'Successful %s for MID %s' % (msg['type'], msg['MID'])

		elif msg['type'] == 'appendrpc':
			if currentState == 'candidate':
				currentState = 'follower'
			votedFor = None
			votes = 0
			leader_id = msg['leader']
			currentTerm = msg['term']
			print 'leader for replica %s is %s' % (my_id, leader_id)
			last = time.time()
		elif msg['type'] == 'requestvoterpc':
			#print "handling vote request"
			handle_vote_request(msg, sock)
		elif msg['type'] == 'replyvoterpc':
			if msg['vote']:
				votes += 1
				if currentState == 'candidate':
					tally_votes(sock)
			else:
				currentTerm = msg['term']

		# Handle noop messages. This may be removed from your final implementation
		#elif msg['type'] == 'noop':
			#print '%s received a NOOP from %s' % (msg['dst'], msg['src'])

	
	clock = time.time()
	if currentState == 'leader':
		if clock - appendLast > .1:
			send_append_rpc([], sock)
			appendLast = clock
			last = clock
	#checks if received an Append RPC message in election timeout frame
	if clock - last > election_timeout:
		print 'TIMEOUT: id= %s clock= %s last= %s timeout- %s' % (my_id, clock, last, election_timeout)
		# reset from last election
		votes = 1
		leader_id = 'FFFF'
		votedFor = my_id
		# change our state to be a candidate
		currentState = 'candidate'
		# increment term
		currentTerm += 1
		# if election timeout, declare yourself the leader
		request_vote(currentTerm, my_id, len(log) - 1, log[len(log) - 1][1], sock)

		# Send a no-op message to a random peer every two seconds, just for fun
		# You definitely want to remove this from your implementation
		#msg = {'src': my_id, 'dst': random.choice(replica_ids), 'leader': 'FFFF', 'type': 'noop'}
		#sock.send(json.dumps(msg))
		#print '%s sending a NOOP to %s' % (msg['src'], msg['dst'])
		last = clock
